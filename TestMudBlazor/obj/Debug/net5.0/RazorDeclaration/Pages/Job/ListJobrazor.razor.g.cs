// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TestMudBlazor.Pages.Job
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Project\FontEnd\Blazor\MudblazorTest\TestMudBlazor\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Project\FontEnd\Blazor\MudblazorTest\TestMudBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Project\FontEnd\Blazor\MudblazorTest\TestMudBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Project\FontEnd\Blazor\MudblazorTest\TestMudBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Project\FontEnd\Blazor\MudblazorTest\TestMudBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Project\FontEnd\Blazor\MudblazorTest\TestMudBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Project\FontEnd\Blazor\MudblazorTest\TestMudBlazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Project\FontEnd\Blazor\MudblazorTest\TestMudBlazor\_Imports.razor"
using TestMudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Project\FontEnd\Blazor\MudblazorTest\TestMudBlazor\_Imports.razor"
using TestMudBlazor.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Project\FontEnd\Blazor\MudblazorTest\TestMudBlazor\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Project\FontEnd\Blazor\MudblazorTest\TestMudBlazor\_Imports.razor"
using AKSoftware.Localization.MultiLanguages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Project\FontEnd\Blazor\MudblazorTest\TestMudBlazor\_Imports.razor"
using AKSoftware.Localization.MultiLanguages.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Project\FontEnd\Blazor\MudblazorTest\TestMudBlazor\Pages\Job\ListJobrazor.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/listjob")]
    public partial class ListJobrazor : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 206 "C:\Project\FontEnd\Blazor\MudblazorTest\TestMudBlazor\Pages\Job\ListJobrazor.razor"
           

            [CascadingParameter]
            public bool Rtl { get; set; }

            bool openLeft = false;
            bool openRight = false;

            void ToggleLeftDrawer()
            {
                openLeft = !openLeft;
            }

            public void ToggleRightDrawer()
            {
                openRight = !openRight;
            }


        private bool dense1 = false;
        private string searchString;
        private bool hover = true;

        class Job
        {
            public string Service;
            public string SRNo;
            public string HouseNo;
            public string MasterNo;
            public string JobNo;
            public string Salesman;
            public string Customer;
            public string CustomerName;
            public string Vessel;
            //public string VOY;
            public string ETD;
            public string ETA;
            public string Carrier;
            public string POL;
            public string POD;
            public string ConfirmBy;
            public string ConfirmAt;
            public string ConfirmWOby;
            public string ConfirmWOat;
            public string Manifest;
            public string InsertUser;
            public string Invoice;
            public string Payment;
            public string DCNote;
            public string Tax;
            public string Slip;
            public string Closed;
        }

        Job[] Jobs = new Job[]
    {
            new Job { Service = "SEA", SRNo = "HSE2105002", HouseNo = "LSHCLI204198" , MasterNo = "KYHCMH2002775", JobNo = "NAP21-1021001" ,Salesman="Tamtt", Customer = "Hathang" , CustomerName = "Công ty cổ phần Hà Thăng" , Vessel = "MAERSK DISCOVERY",
            ETD = DateTime.Now.ToString("dd/MM/yyyy") , ETA = DateTime.Now.ToString("dd/MM/yyyy"), Carrier = "ABOX SA" , POL = "KRPUS" ,  POD = "VNHPH" ,
             ConfirmBy = "Admin", ConfirmAt = "04/10/2021" , ConfirmWOby = "Namlv", ConfirmWOat = "04/10/2021" , Manifest = "" ,InsertUser="",
            Invoice = "Checked", Payment = "Uncheck", DCNote = "Checked" , Tax = "Uncheck", Slip="Checked", Closed = "N"},
            new Job { Service = "AIR", SRNo = "HSE2105002", HouseNo = "LNBCLI201697" , MasterNo = "SITGNBCL113569B", JobNo = "NAP21-1021002" ,Salesman="Tamtt", Customer = "AASC" , CustomerName = "All Korea" , Vessel = "SHUNSHINE BANDAMA",
            ETD = DateTime.Now.ToString("dd/MM/yyyy") , ETA = DateTime.Now.ToString("dd/MM/yyyy"), Carrier = "APLU" , POL = "HAN" ,  POD = "ICN" ,
             ConfirmBy = "Admin", ConfirmAt = "02/10/2021" , ConfirmWOby = "Tamtt", ConfirmWOat = "02/10/2021" , Manifest = "Unchecked" ,InsertUser="",
            Invoice = "Unchecked", Payment = "Checked", DCNote = "Checked" , Tax = "Checked", Slip="Unchecked", Closed = "N"},
            new Job { Service = "SEA", SRNo = "HSE2105008", HouseNo = "LNBCLI201697" , MasterNo = "SITNGBCL113569B", JobNo = "NAP21-1021003" ,Salesman="Tamtt", Customer = "ALLKR" , CustomerName = "Công ty cổ phần Hà Thăng" , Vessel = "APL PARIS",
            ETD = DateTime.Now.ToString("dd/MM/yyyy") , ETA = DateTime.Now.ToString("dd/MM/yyyy"), Carrier = "EVER" , POL = "VNHPH" ,  POD = "AEIND" ,
             ConfirmBy = "Admin", ConfirmAt = "05/10/2021" , ConfirmWOby = "Tamtt", ConfirmWOat = "05/10/2021" , Manifest = "Checked" ,InsertUser="",
            Invoice = "Unchecked", Payment = "Checked", DCNote = "Checked" , Tax = "Checked", Slip="Unchecked", Closed = "N"},
new Job { Service = "SEA", SRNo = "HSE2105006", HouseNo = "EPLS2105012" , MasterNo = "TNH01021999", JobNo = "NAP21-1021004" ,Salesman="Tamtt", Customer = "CABLE" , CustomerName = "Cửa hàng bán dây mạng" , Vessel = "APL 01",
            ETD = DateTime.Now.ToString("dd/MM/yyyy") , ETA = DateTime.Now.ToString("dd/MM/yyyy"), Carrier = "CJSC" , POL = "AIVAL" ,  POD = "VBHPH" ,
             ConfirmBy = "Admin", ConfirmAt = "10/10/2021" , ConfirmWOby = "Tamtt", ConfirmWOat = "10/10/2021" , Manifest = "Unchecked" ,InsertUser="",
            Invoice = "Checked", Payment = "Unchecked", DCNote = "Checked" , Tax = "Unchecked", Slip="Checked", Closed = "N"},
            new Job { Service = "SEA", SRNo = "HSE2105003", HouseNo = "EPLS2105008" , MasterNo = "AH01021999", JobNo = "NAP21-1021005" ,Salesman="Tamtt", Customer = "HUONGVIET" , CustomerName = "Công ty TNHH dịch vụ du lịch hương mại Hương Việt" , Vessel = "AKARI",
            ETD = DateTime.Now.ToString("dd/MM/yyyy") , ETA = DateTime.Now.ToString("dd/MM/yyyy"), Carrier = "CCIF" , POL = "AEDAS" ,  POD = "VNHPH" ,
             ConfirmBy = "Admin", ConfirmAt = "12/10/2021" , ConfirmWOby = "Tamtt", ConfirmWOat = "12/10/2021" , Manifest = "Unchecked" ,InsertUser="",
            Invoice = "Unchecked", Payment = "Checked", DCNote = "Checked" , Tax = "Unchecked", Slip="Checked", Closed = "N"},
            new Job { Service = "AIR", SRNo = "HSE2105009", HouseNo = "EPLS2105015" , MasterNo = "HNT01021999", JobNo = "NAP21-1021006" ,Salesman="Tamtt", Customer = "KIYI CHINA" , CustomerName = "KIRI CHINA" , Vessel = "BAGAN STAR",
            ETD = DateTime.Now.ToString("dd/MM/yyyy") , ETA = DateTime.Now.ToString("dd/MM/yyyy"), Carrier = "CHIW" , POL = "VNHPH" ,  POD = "ANBUB" ,
             ConfirmBy = "Admin", ConfirmAt = "15/10/2021" , ConfirmWOby = "Admin", ConfirmWOat = "16/10/2021" , Manifest = "Checked" ,InsertUser="N",
            Invoice = "Checked", Payment = "Unchecked", DCNote = "Checked" , Tax = "Checked", Slip="Checked", Closed = "N"},
new Job { Service = "SEA", SRNo = "HAE2105002", HouseNo = "GLD0000118" , MasterNo = "98812345555", JobNo = "NAP21-1021007" ,Salesman="Tamtt", Customer = "ARISTON" , CustomerName = "ARISTON Thermo VietNam LTD" , Vessel = "AKARI",
            ETD = DateTime.Now.ToString("dd/MM/yyyy") , ETA = DateTime.Now.ToString("dd/MM/yyyy"), Carrier = "ABOX SA" , POL = "ABE" ,  POD = "ABQ" ,
             ConfirmBy = "Admin", ConfirmAt = "16/10/2021" , ConfirmWOby = "Tamtt", ConfirmWOat = "16/10/2021" , Manifest = "Unchecked" ,InsertUser="",
            Invoice = "Checked", Payment = "Unchecked", DCNote = "Checked" , Tax = "Checked", Slip="Unchecked", Closed = "N"},
            new Job { Service = "SEA", SRNo = "HSE2105005", HouseNo = "EPLS2105011" , MasterNo = "MSBE2105005", JobNo = "NAP21-1021008" ,Salesman="Tamtt", Customer = "APLOG" , CustomerName = "Aplog" , Vessel = "AKARI",
            ETD = DateTime.Now.ToString("dd/MM/yyyy") , ETA = DateTime.Now.ToString("dd/MM/yyyy"), Carrier = "APLU" , POL = "VNHPH" ,  POD = "AEAMU" ,
             ConfirmBy = "Admin", ConfirmAt = "20/10/2021" , ConfirmWOby = "Tamtt", ConfirmWOat = "20/10/2021" , Manifest = "Checked" ,InsertUser="FCL",
            Invoice = "Checked", Payment = "Unchecked", DCNote = "Checked" , Tax = "Checked", Slip="Checked", Closed = "N"},
            new Job { Service = "SEA", SRNo = "HAE2105002", HouseNo = "GLD0000118" , MasterNo = "02043913928", JobNo = "NAP21-1021009" ,Salesman="Tamtt", Customer = "Hathang" , CustomerName = "Công ty cổ phần Hà Thăng" , Vessel = "SITC HAIPHONG",
            ETD = DateTime.Now.ToString("dd/MM/yyyy") , ETA = DateTime.Now.ToString("dd/MM/yyyy"), Carrier = "ZIMU" , POL = "HAN" ,  POD = "ICN" ,
             ConfirmBy = "Admin", ConfirmAt = "21/10/2021" , ConfirmWOby = "Tamtt", ConfirmWOat = "21/10/2021" , Manifest = "Checked" ,InsertUser="",
            Invoice = "Checked", Payment = "Checked", DCNote = "Checked" , Tax = "Checked", Slip="Unchecked", Closed = "N"},
            };










        private HashSet<Job> selectedItems1 = new HashSet<Job>();
        private IEnumerable<Job> Elements = new List<Job>();
        protected override async Task OnInitializedAsync()
        {
            Elements = Jobs;
            Elements2 = detailContainerlists;
        }

        private bool resetValueOnEmptyText;
        private bool coerceText;
        private bool coerceValue;
        private string value1, value2;

        private string[] states =
    {
        "Hà Nội", "Bắc Ninh", "TP HCM",
    };

        private string[] states2 =
    {
        "Xác nhận", "Treo", "Hủy",
    };

        private async Task<IEnumerable<string>> Search1(string value)
        {
            // In real life use an asynchronous function for fetching data from an api.
            await Task.Delay(5);

            // if text is null or empty, show complete list
            if (string.IsNullOrEmpty(value))
                return states;
            return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }

        private async Task<IEnumerable<string>> Search2(string value)
        {
            // In real life use an asynchronous function for fetching data from an api.
            await Task.Delay(5);

            // if text is null or empty, show complete list
            if (string.IsNullOrEmpty(value))
                return states2;
            return states2.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }

        class DetailContainerlist
        {
            public string Stt;
            public string Cntr;
            public string Qty;
        }

        DetailContainerlist[] detailContainerlists = new DetailContainerlist[]
    {
        new DetailContainerlist { Stt = "1",Cntr = "OF", Qty = "1", },
        new DetailContainerlist {Stt = "2", Cntr = "OF", Qty = "2", },
 new DetailContainerlist { Stt = "3",Cntr = "OF", Qty = "3", },
                                        };

        private HashSet<DetailContainerlist> selectedItems = new HashSet<DetailContainerlist>();
        private IEnumerable<DetailContainerlist> Elements2 = new List<DetailContainerlist>();


        //    private tablegroupdefinition<testtable> _groupdefinition = new()
        //    {
        //        groupname = "group",
        //        indentation = false,
        //        expandable = true,
        //        isinitiallyexpanded = false,
        //        selector = (e) => e.group
        //    };

        //    private ienumerable<testtable> testtabless = new list<testtable>();

        //    class testtable
        //    {
        //        public string group;
        //        public string name;
        //        public string small;
        //        public int position;
        //        public int number;
        //        public string molar;
        //        public electrons;
        //        }

        //    testtable[] testtabless = new testtable[]
        //{
        //        new testtable {group="other",position=0,name="hydrogen",number=1,small="h",molar="abc",electrons=[1]},
        //                                    };
    

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISnackbar Snackbar { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient httpClient { get; set; }
    }
}
#pragma warning restore 1591
