
@page "/addcost"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
<MudGrid Style="margin-top: 10px">

    
    <MudGrid>
        <MudItem xs="12">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="6">
                        <MudText Style="line-height: 60px" Typo="Typo.h5" GutterBottom="true">Thêm mới chi phí</MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudToolBar>
                            <MudSpacer />
                            <MudIconButton Icon="@Icons.Material.Outlined.Add" ButtonType="ButtonType.Submit" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Notifications" />
                        </MudToolBar>
                    </MudItem>
                </MudGrid>
                <MudGrid>
                    <MudItem xs="12" sm="6" md="6">
                        <MudTextField @bind-Value="model.code" Label="Mã (*)" Variant="Variant.Outlined"
                                      For="@(() => model.code)"></MudTextField>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="6">
                        <MudTextField @bind-Value="model.name" Label="Tên" Variant="Variant.Outlined"
                                      For="@(() => model.name)"></MudTextField>
                    </MudItem>



                </MudGrid>
                <MudGrid>
                    <MudItem xs="12" sm="6" md="6">
                        <MudAutocomplete T="string" Label="Kiểu" @bind-Value="model.quocgia" SearchFunc="@Search1"
                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                         CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" For="@(() => model.quocgia)" />
                    </MudItem>

                    <MudItem xs="12" sm="6" md="6">
                        <MudNumericField @bind-Value="model.stt" Label="Thứ tự" Variant="Variant.Outlined"
                                         For="@(() => model.stt)"></MudNumericField>
                    </MudItem>

                </MudGrid>
                <MudGrid>
                    <MudItem xs="12" sm="6" md="12">
                        <MudTextField @bind-Value="model.note" Label="Ghi chú" Variant="Variant.Outlined"
                                      For="@(() => model.note)"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Class="ml-n2"
                                     Label="Hoạt động" />
                    </MudItem>
                </MudGrid>

                <MudGrid>
                    <MudItem xs="12">
                        <MudText Align="Align.Center" Style="color: red" GutterBottom="true">
                            "Vui lòng nhập thông tin,
                            các ô có dấu (*) là bắt buộc"
                        </MudText>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudItem>


    </MudGrid>
</MudGrid>

@code {

    Form model = new Form();
    public class Form
    {
        [Required(ErrorMessage = "Nhập mã!")]
        //[StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string code { get; set; }

        public string name { get; set; }
        public string nation { get; set; }

        public string stt { get; set; }
        public bool actice { get; set; }

        public string note { get; set; }
        public string quocgia { get; set; }



    }

    bool success;
    string[] errors = { };
    private void OnValidSubmit(EditContext context)
    {
    }

    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string value1, value2;

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
