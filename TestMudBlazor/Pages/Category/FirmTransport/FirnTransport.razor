@page "/addfirmtransport"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject ILanguageContainerService lang
<MudGrid Style="margin-top: 10px">


    <MudGrid>
        <MudItem xs="12">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="6">
                        <MudText Style="line-height: 60px" Typo="Typo.h5" GutterBottom="true">@lang.Keys["Code"]</MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudToolBar>
                            <MudSpacer />
                            <MudIconButton Icon="@Icons.Material.Outlined.Add" ButtonType="ButtonType.Submit" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Notifications" />
                        </MudToolBar>
                    </MudItem>
                </MudGrid>
                <MudGrid>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="model.Ma" Label="@lang.Keys["Code"]" Variant="Variant.Outlined" For="@(() => model.Ma)"></MudTextField>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="model.Ten" Label="@lang.Keys["Code"]" Variant="Variant.Outlined" For="@(() => model.Ten)"></MudTextField>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="4">
                        <MudAutocomplete T="string" Label="@lang.Keys["Code"]" @bind-Value="model.Loai" SearchFunc="@Search1"
                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                         CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" For="@(() => model.Loai)" />
                    </MudItem>
                </MudGrid>
                <MudGrid>

                    <MudItem xs="12" sm="6" md="4">
                        <MudNumericField @bind-Value="model.ThuTu" Label="@lang.Keys["Code"]" Variant="Variant.Outlined" For="@(() => model.ThuTu)"></MudNumericField>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="8">
                        <MudTextField @bind-Value="model.GhiChu" Label="@lang.Keys["Code"]" Variant="Variant.Outlined" For="@(() => model.GhiChu)"></MudTextField>
                    </MudItem>
                </MudGrid>
                <MudGrid>
                    <MudItem xs="12" sm="12" md="12">
                        <MudCheckBox T="bool" Required="true" @bind-Value="model.HoatDong" RequiredError="You must agree" Class="ml-n2"
                                     Label="@lang.Keys["Code"]" />
                    </MudItem>
                </MudGrid>
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Align="Align.Center" Style="color: red" GutterBottom="true">"Vui lòng nhập thông tin, các ô có dấu (*) là bắt buộc"</MudText>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudItem>


    </MudGrid>
</MudGrid>

@code {

    FirmTransport model = new FirmTransport();
    public class FirmTransport
    {
        [Required(ErrorMessage = "Nhập mã!")]
        public string Ma { get; set; }
        public string Ten { get; set; }
        public string GhiChu { get; set; }
        public double ThuTu { get; set; }
        public string Loai { get; set; }
        public string HoatDong { get; set; }



    }

    bool success;
    string[] errors = { };
    private void OnValidSubmit(EditContext context)
    {
    }

    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
    };

    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string value1, value2;

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    protected override async Task OnInitializedAsync()
    {
        lang.InitLocalizedComponent(this);
    }


}
