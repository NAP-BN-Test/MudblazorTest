@* Gihug 01/09/2021*@
@page "/add-update-hs-code"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject ILanguageContainerService lang
<MudGrid Style="margin-top: 10px">


    <MudGrid>
        <MudItem xs="12">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="6">
                        <MudText Style="line-height: 60px" Typo="Typo.h5" GutterBottom="true">@lang.Keys["AddHSCode"]</MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudToolBar>
                            <MudSpacer />
                            <MudIconButton Icon="@Icons.Material.Outlined.Add" ButtonType="ButtonType.Submit" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Notifications" />
                        </MudToolBar>
                    </MudItem>
                </MudGrid>
                <MudGrid>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="model.Ma" Label="@lang.Keys["Code"]" Variant="Variant.Outlined"
                                      For="@(() => model.Ma)"></MudTextField>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="model.HangHoa" Label="@lang.Keys["Code"]" Variant="Variant.Outlined"
                                      For="@(() => model.HangHoa)"></MudTextField>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="model.MoTa" Label="@lang.Keys["Code"]" Variant="Variant.Outlined"
                                      For="@(() => model.MoTa)"></MudTextField>
                    </MudItem>



                </MudGrid>
                <MudGrid>
                    <MudItem xs="12" sm="6" md="4">
                        <MudAutocomplete T="string" Label="@lang.Keys["Code"]" @bind-Value="model.QuocGia" SearchFunc="@Search1"
                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                         CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" For="@(() => model.QuocGia)" />
                    </MudItem>

                    <MudItem xs="12" sm="6" md="4">
                        <MudNumericField @bind-Value="model.ThuTu" Label="@lang.Keys["Code"]" Variant="Variant.Outlined"
                                         For="@(() => model.ThuTu)"></MudNumericField>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="model.GhiChu" Label="@lang.Keys["Code"]" Variant="Variant.Outlined"
                                      For="@(() => model.GhiChu)"></MudTextField>
                    </MudItem>
                </MudGrid>
                <MudGrid>


                    <MudItem xs="12" sm="6" md="4">
                        <MudCheckBox T="bool" Required="true" @bind-Value="model.HoatDong" RequiredError="You must agree" Class="ml-n2"
                                     Label="@lang.Keys["Code"]" />
                    </MudItem>
                </MudGrid>
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Align="Align.Center" Style="color: red" GutterBottom="true">
                            "Vui lòng nhập thông tin,
                            các ô có dấu (*) là bắt buộc"
                        </MudText>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudItem>


    </MudGrid>
</MudGrid>

@code {

    HSCODE model = new HSCODE();
    public class HSCODE
    {
        [Required(ErrorMessage = "Nhập mã!")]
        public string Ma { get; set; }
        public string MoTa { get; set; }
        public string HangHoa { get; set; }
        public string QuocGia { get; set; }
        public string ThuTu { get; set; }
        public bool HoatDong { get; set; }
        public string GhiChu { get; set; }
    }

    bool success;
    string[] errors = { };
    private void OnValidSubmit(EditContext context)
    {
    }

    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string value1, value2;

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    protected override async Task OnInitializedAsync()
    {
        lang.InitLocalizedComponent(this);
    }
}
