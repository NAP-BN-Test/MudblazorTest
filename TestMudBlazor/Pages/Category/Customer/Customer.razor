@page "/addcustomer"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@inject ILanguageContainerService lang
@using DiaLog 
<style>
    .mud-tab {
        justify-content: unset !important;
    }

    .mud-toolbar.mud-toolbar-gutters.toolbarCustom {
        padding-left: 6px;
        padding-right: 0px;
    }

    .searchcutom.mud-input-control > .mud-input-control-input-container > div.mud-input.mud-input-text {
        margin-top: 0px;
    }
</style>

<MudGrid Style="margin-top: 10px">
    <MudGrid>
        <MudItem xs="6">
            <MudText Typo="Typo.h5" Style="line-height: 60px" GutterBottom="true">@lang.Keys["Customer"]</MudText>
        </MudItem>
        <MudItem xs="6">
            <MudToolBar>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Outlined.Add" />
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" />
                <MudIconButton Icon="@Icons.Material.Outlined.Print" />
            </MudToolBar>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12">
            <MudTabs Outlined="false" Position="Position.Right" Rounded="false" Border="false"
                     ApplyEffectsToContainer="true" Class="mt-8 custom_mudtabbar">
                <MudTabPanel Style="font-size: 10px" Text="@lang.Keys["AddCustomer"]">
                    <MudGrid Style="margin-right: 10px">
                        <MudItem xs="12">
                            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">

                                <MudGrid>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudTextField @bind-Value="model.MaKhachHang" Label="@lang.Keys["MaKhachHang"]" Variant="Variant.Outlined" For="@(() => model.MaKhachHang)"></MudTextField>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudSelect T="string" Label="@lang.Keys["NhomKhachhang"]" MultiSelection="true" @bind-Value="model.NhomKhachhang" @bind-SelectedValues="options" Variant="Variant.Outlined" For="@(() => model.NhomKhachhang)">
                                            @foreach (var state in states)
                                            {
                                                <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudTextField @bind-Value="model.Ten" Label="@lang.Keys["Ten"]" Variant="Variant.Outlined" For="@(() => model.Ten)"></MudTextField>
                                    </MudItem>
                                </MudGrid>

                                <MudGrid>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudAutocomplete T="string" Label="@lang.Keys["Loai"]" @bind-Value="model.Loai" SearchFunc="@Search1"
                                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                         CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" For="@(() => model.Loai)" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudTextField @bind-Value="model.DiaChi" Label="@lang.Keys["DiaChi"]" Variant="Variant.Outlined" For="@(() => model.DiaChi)"></MudTextField>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudTextField @bind-Value="model.DiaChiDangKyKinhDoanh" Label="@lang.Keys["DiaChiDangKyKinhDoanh"]" Variant="Variant.Outlined" For="@(() => model.DiaChiDangKyKinhDoanh)"></MudTextField>
                                    </MudItem>
                                </MudGrid>

                                <MudGrid>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudAutocomplete T="string" Label="@lang.Keys["QuocGia"]" @bind-Value="model.QuocGia" SearchFunc="@Search1"
                                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                         CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" For="@(() => model.QuocGia)" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudTextField @bind-Value="model.SoDienThoai" Label="@lang.Keys["SoDienThoai"]" Variant="Variant.Outlined" For="@(() => model.SoDienThoai)"></MudTextField>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudTextField @bind-Value="model.Email" Label="@lang.Keys["Email"]" Variant="Variant.Outlined" For="@(() => model.Email)"></MudTextField>
                                    </MudItem>
                                </MudGrid>

                                <MudGrid>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudTextField @bind-Value="model.Fax" Label="@lang.Keys["Fax"]" Variant="Variant.Outlined" For="@(() => model.Fax)"></MudTextField>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudDatePicker Label="@lang.Keys["NgaySinh"]" @bind-Date="model.NgaySinh" DateFormat="dd/MM/yyyy" Variant="Variant.Outlined" For="@(() => model.NgaySinh)" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudTextField @bind-Value="model.MaSoThue" Label="@lang.Keys["MaSoThue"]" Variant="Variant.Outlined" For="@(() => model.MaSoThue)"></MudTextField>
                                    </MudItem>
                                </MudGrid>

                                <MudGrid>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudSelect T="string" Label="@lang.Keys["LoaiHinhKinhDoanh"]" @bind-Value="model.LoaiHinhKinhDoanh" MultiSelection="true" @bind-SelectedValues="options" Variant="Variant.Outlined">
                                            @foreach (var state in states)
                                            {
                                                <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudSelect T="string" Label="@lang.Keys["LoaiKhachHang"]" @bind-Value="model.LoaiKhachHang" MultiSelection="true" @bind-SelectedValues="options" Variant="Variant.Outlined">
                                            @foreach (var state in states)
                                            {
                                                <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudAutocomplete T="string" Label="@lang.Keys["LoaiTienTe"]" @bind-Value="model.LoaiTienTe" SearchFunc="@Search1"
                                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                         CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" />

                                    </MudItem>
                                </MudGrid>

                                <MudGrid>
                                    <MudItem xs="12" sm="12" md="12">
                                        <MudTextField @bind-Value="model.GhiChu" Label="@lang.Keys["GhiChu"]" Variant="Variant.Outlined" For="@(() => model.GhiChu)"></MudTextField>
                                    </MudItem>

                                </MudGrid>

                                <MudGrid>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudCheckBox T="bool" Required="true" @bind-Value="model.HoatDong" RequiredError="You must agree" Class="ml-n2"
                                                     Label="@lang.Keys["HoatDong"]" />
                                        @*<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Thêm</MudButton>*@
                                    </MudItem>
                                </MudGrid>

                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudText Align="Align.Center" Style="color: red" GutterBottom="true">"Vui lòng nhập thông tin, các ô có dấu (*) là bắt buộc"</MudText>
                                    </MudItem>
                                </MudGrid>
                            </EditForm>
                        </MudItem>
                    </MudGrid>

                </MudTabPanel>

                <MudTabPanel Style="font-size: 10px" Text="@lang.Keys["ListContact"]">
                    <MudGrid Style="margin-right: 10px">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudToolBar Class="toolbarCustom">
                                    <MudTextField @bind-Value="searchString" Style="width: 50%" Placeholder="@lang.Keys["Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 searchcutom"></MudTextField>
                                    <MudSpacer />
                                    <MudLink Typo="Typo.body2"><MudIconButton Icon="@Icons.Material.Outlined.Add" @onclick="OpenDialogContact" /></MudLink>
                                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" />
                                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" />
                                    <MudIconButton Icon="@Icons.Material.Outlined.Print" />


                                </MudToolBar>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudTable Items="@Elements" MultiSelection="true" @bind-SelectedItems="selectedItems1" Hover="@hover">
                                    <HeaderContent>
                                        <MudTh>@lang.Keys["HoTen"]</MudTh>
                                        <MudTh>@lang.Keys["SoDienThoai"]</MudTh>
                                        <MudTh>@lang.Keys["Email"]</MudTh>
                                        <MudTh>@lang.Keys["Fax"]</MudTh>
                                        <MudTh>@lang.Keys["ChucVu"]</MudTh>
                                        <MudTh>@lang.Keys["CoHanhDongde"]</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="HoTen">@context.HoTen</MudTd>
                                        <MudTd DataLabel="SoDienThoai">@context.SoDienThoai</MudTd>
                                        <MudTd DataLabel="Email">@context.Email</MudTd>
                                        <MudTd DataLabel="Fax">@context.Fax</MudTd>
                                        <MudTd DataLabel="ChucVu">@context.ChucVu</MudTd>
                                        <MudTd DataLabel="HanhDong">@context.HanhDong</MudTd>
                                    </RowTemplate>
                                    <PagerContent>
                                        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                                    </PagerContent>

                                </MudTable>
                            </MudItem>
                        </MudGrid>
                    </MudGrid>
                </MudTabPanel>
                <MudTabPanel Style="font-size: 10px" Text="@lang.Keys["ListAccBank"]">
                    <MudGrid Style="margin-right: 10px">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudToolBar Class="toolbarCustom">
                                    <MudTextField @bind-Value="searchString" Style="width: 50%" Placeholder="@lang.Keys["Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 searchcutom"></MudTextField>
                                    <MudSpacer />
                                    <MudLink Typo="Typo.body2"><MudIconButton Icon="@Icons.Material.Outlined.Add" @onclick="OpenDialogAccBank" /></MudLink>
                                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" />
                                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" />
                                    <MudIconButton Icon="@Icons.Material.Outlined.Print" />


                                </MudToolBar>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudTable Items="@Elements2" MultiSelection="true" @bind-SelectedItems="selectedItemsBank" Hover="@hover">
                                    <HeaderContent>
                                        <MudTh>@lang.Keys["SoTaiKhoan"]</MudTh>
                                        <MudTh>@lang.Keys["ChuTaiKhoan"]</MudTh>
                                        <MudTh>@lang.Keys["NganHang"]</MudTh>
                                        <MudTh>@lang.Keys["ChiNhanh"]</MudTh>
                                        <MudTh>@lang.Keys["DiaChiChiNhanh"]</MudTh>
                                        <MudTh>@lang.Keys["Tinh"]</MudTh>
                                        <MudTh>@lang.Keys["GhiChu"]</MudTh>
                                        <MudTh>@lang.Keys["HanhDong"]</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="SoTaiKhoan">@context.SoTaiKhoan</MudTd>
                                        <MudTd DataLabel="ChuTaiKhoan">@context.ChuTaiKhoan</MudTd>
                                        <MudTd DataLabel="NganHang">@context.NganHang</MudTd>
                                        <MudTd DataLabel="ChiNhanh">@context.ChiNhanh</MudTd>
                                        <MudTd DataLabel="DiaChiChiNhanh">@context.DiaChiChiNhanh</MudTd>
                                        <MudTd DataLabel="Tinh">@context.Tinh</MudTd>
                                        <MudTd DataLabel="GhiChu">@context.GhiChu</MudTd>
                                        <MudTd DataLabel="HanhDong">@context.HanhDong</MudTd>
                                    </RowTemplate>
                                    <PagerContent>
                                        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                                    </PagerContent>

                                </MudTable>
                            </MudItem>
                        </MudGrid>
                    </MudGrid>
                </MudTabPanel>


            </MudTabs>
        </MudItem>
    </MudGrid>



</MudGrid>

@code {

    public string searchString { get; set; }


    MudForm form;
    bool success;
    string[] errors = { };
    private void OnValidSubmit(EditContext context)
    {
    }
    CustomerDetail model = new CustomerDetail();
    public class CustomerDetail
    {
        [Required(ErrorMessage = "Nhập mã khách hàng!")]
        public string MaKhachHang { get; set; }
        public string Ten { get; set; }
        [Required(ErrorMessage = "Nhập số điện thoại!")]
        public string SoDienThoai { get; set; }
        public string thutu { get; set; }
        public string Loai { get; set; }
        public string NhomKhachhang { get; set; }
        public string DiaChiDangKyKinhDoanh { get; set; }
        public string DiaChi { get; set; }
        public string QuocGia { get; set; }
        [Required(ErrorMessage = "Nhập email!")]
        [EmailAddress(ErrorMessage = "Email không đúng định dạng!")]
        public string Email { get; set; }
        public string MaSoThue { get; set; }
        public string Fax { get; set; }
        public string LoaiTienTe { get; set; }
        public string LoaiKhachHang { get; set; }
        public string LoaiHinhKinhDoanh { get; set; }
        public string GhiChu { get; set; }
        public bool HoatDong { get; set; }
        [Range(typeof(DateTime), "1/1/1970", "12/31/3000", ErrorMessage = "Value for {0} must be between {1} and {2}")]
        public DateTime? NgaySinh { get; set; }

    }

    private void OpenDialogContact()
    {
        DialogService.Show<DialogContact>("Simple Dialog");
    }

    private void OpenDialogAccBank()
    {
        DialogService.Show<DialogAccBank>("Simple Dialog");
    }



    private string value { get; set; } = "Nothing selected";
    private HashSet<string> options { get; set; } = new HashSet<string>() { "Alaska" };

    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private bool hover = true;
    Listcontact[] listcontact = new Listcontact[]
{
        new Listcontact { HoTen = "CV01", SoDienThoai = "a", Email = "abc@gmail.com" , Fax = "1234568", ChucVu = "10", HanhDong= true },
        new Listcontact { HoTen = "CV01", SoDienThoai = "a", Email = "abc@gmail.com" , Fax = "1234568", ChucVu = "10", HanhDong= true },
        new Listcontact { HoTen = "CV01", SoDienThoai = "a", Email = "abc@gmail.com" , Fax = "1234568", ChucVu = "10", HanhDong= true },
                    };

    class Listcontact
    {
        public string HoTen;
        public string SoDienThoai;
        public bool HanhDong;
        public string Email;
        public string Fax;
        public string ChucVu;
    }

    private HashSet<Listcontact> selectedItems1 = new HashSet<Listcontact>();
    private IEnumerable<Listcontact> Elements = new List<Listcontact>();
    protected override async Task OnInitializedAsync()
    {
        Elements = listcontact;
        Elements2 = listbank;

        lang.InitLocalizedComponent(this);
    }


    class ListBank
    {
        public string GhiChu;
        public string Tinh;
        public string DiaChiChiNhanh;
        public string ChiNhanh;
        public string NganHang;
        public string ChuTaiKhoan;
        public string SoTaiKhoan;
        public bool HanhDong;
    }

    ListBank[] listbank = new ListBank[]
{
        new ListBank { SoTaiKhoan = "04041999999", ChuTaiKhoan = "Dũng", HanhDong = true , NganHang = "TPBANK", ChiNhanh = "HÀ NỘI", DiaChiChiNhanh="Hà Nội", Tinh="Hà Nội", GhiChu="abc" },
        new ListBank { SoTaiKhoan = "04041999999", ChuTaiKhoan = "Dũng", HanhDong = true , NganHang = "TPBANK", ChiNhanh = "HÀ NỘI", DiaChiChiNhanh="Hà Nội", Tinh="Hà Nội", GhiChu="abc" },
        new ListBank { SoTaiKhoan = "04041999999", ChuTaiKhoan = "Dũng", HanhDong = true , NganHang = "TPBANK", ChiNhanh = "HÀ NỘI", DiaChiChiNhanh="Hà Nội", Tinh="Hà Nội", GhiChu="abc" },
            };



    private HashSet<ListBank> selectedItemsBank = new HashSet<ListBank>();
    private IEnumerable<ListBank> Elements2 = new List<ListBank>();

    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string value1, value2;

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }



}
