@page "/bookingcomponent"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@using DiaLog
@inject ISnackbar Snackbar
    <style>
        .mud-tab {
            justify-content: unset !important;
        }

        .mud-toolbar.mud-toolbar-gutters.toolbarCustom {
            padding-left: 6px;
            padding-right: 0px;
        }

        .searchcutom.mud-input-control > .mud-input-control-input-container > div.mud-input.mud-input-text {
            margin-top: 0px;
        }

        .test1 {
        }

            .test1:hover .toolbatest {
                display: block;
            }

            .test1:hover .toolbatest-fake {
                display: block;
            }

            .test1:hover .date {
                display: none;
            }


        
    </style>
    <MudGrid Style="margin-top: 10px">

        <MudGrid>
            <MudItem xs="12">
                <MudTabs Outlined="false" Position="Position.Right" Rounded="false" Border="false"
                         ApplyEffectsToContainer="true" Class="mt-8 custom_mudtabbar">
                    <MudTabPanel Style="font-size: 10px" Text="Thông tin chung">
                        <MudItem xs="12" Style="margin-right: 50px">
                            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                                <DataAnnotationsValidator />
                                <MudGrid>
                                    <MudItem xs="6">
                                        <MudText Style="line-height: 60px" Typo="Typo.h5" GutterBottom="true">Booking</MudText>
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudToolBar>
                                            <MudSpacer />
                                            <MudIconButton Icon="@Icons.Material.Outlined.Add" ButtonType="ButtonType.Submit" />
                                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" />
                                            <MudIconButton Icon="@Icons.Material.Outlined.Notifications" />
                                        </MudToolBar>
                                    </MudItem>
                                </MudGrid>
                                <MudGrid>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudAutocomplete T="string" Label="Load Type" @bind-Value="model.KhachHang" SearchFunc="@Search1"
                                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                         CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" For="@(() => model.KhachHang)" />
                                    </MudItem>

                                    <MudItem xs="12" sm="6" md="4">
                                        <MudAutocomplete T="string" Label="Freight Terms" @bind-Value="model.KhachHang" SearchFunc="@Search1"
                                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                         CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" For="@(() => model.KhachHang)" />
                                    </MudItem>

                                    <MudItem xs="12" sm="6" md="4">
                                        <MudAutocomplete T="string" Label="Service Terms" @bind-Value="model.KhachHang" SearchFunc="@Search1"
                                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                         CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" For="@(() => model.KhachHang)" />
                                    </MudItem>
                                </MudGrid>

                                <MudGrid>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudAutocomplete T="string" Label="Inco Terms" @bind-Value="model.KhachHang" SearchFunc="@Search1"
                                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                         CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" For="@(() => model.KhachHang)" />
                                    </MudItem>

                                    <MudItem xs="12" sm="6" md="4">
                                        <MudAutocomplete T="string" Label="Cargo Close" @bind-Value="model.KhachHang" SearchFunc="@Search1"
                                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                         CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" For="@(() => model.KhachHang)" />
                                    </MudItem>

                                    <MudItem xs="12" sm="6" md="4">
                                        <MudAutocomplete T="string" Label="S/I Close" @bind-Value="model.KhachHang" SearchFunc="@Search1"
                                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                         CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" For="@(() => model.KhachHang)" />
                                    </MudItem>




                                </MudGrid>

                                <MudGrid>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudAutocomplete T="string" Label="WMG Close" @bind-Value="model.KhachHang" SearchFunc="@Search1"
                                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                         CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" For="@(() => model.KhachHang)" />
                                    </MudItem>
                                </MudGrid>

                                <MudGrid Style="margin-top: 30px; margin-bottom: 10px">
                                    <MudItem xs="12">
                                        <MudText Typo="Typo.h6" GutterBottom="true">CONTAINER LIST</MudText>
                                    </MudItem>

                                </MudGrid>

                                <MudGrid>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudItem xs="12" Style="padding-top: 5px">
                                            <MudTable Context="tableRowContext" Style="position: relative;max-width: 1000px; min-width: 300px" Items="@Elements2" MultiSelection="true" @bind-SelectedItems="selectedItems" Hover="@hover"
                                                      CommitEditTooltip="Commit Edit" OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" >
                                                <HeaderContent>
                                                    <MudTh>Cntr</MudTh>
                                                    <MudTh>Qty</MudTh>
                                                </HeaderContent>
                                                <RowTemplate >
                                                    <MudTd DataLabel="MaPhi">@tableRowContext.MaPhi</MudTd>
                                                    <MudTd DataLabel="TenPhi">@tableRowContext.TenPhi</MudTd>
                                                </RowTemplate>
                                                <RowEditingTemplate>
                                                    <MudTd DataLabel="MaPhi">
                                                        <MudTextField @bind-Value="@tableRowContext.MaPhi" Required />
                                                    </MudTd>
                                                    <MudTd DataLabel="TenPhi">
                                                        <MudTextField @bind-Value="@tableRowContext.TenPhi" Required />
                                                    </MudTd>
                                                </RowEditingTemplate>
                                            </MudTable>
                                        </MudItem>
                                    </MudItem>

                                    <MudItem xs="12" sm="6" md="8">
                                        <MudGrid>
                                            <MudItem xs="12" sm="6" md="6">
                                                <MudAutocomplete T="string" Label="Sale" @bind-Value="model.KhachHang" SearchFunc="@Search1"
                                                                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                                 CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" For="@(() => model.KhachHang)" />
                                            </MudItem>

                                            <MudItem xs="12" sm="6" md="6">
                                                <MudAutocomplete T="string" Label="Operator" @bind-Value="model.KhachHang" SearchFunc="@Search1"
                                                                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                                 CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" For="@(() => model.KhachHang)" />

                                            </MudItem>


                                        </MudGrid>

                                        <MudGrid>
                                            <MudItem xs="12" sm="6" md="6">
                                                <MudAutocomplete T="string" Label="User" @bind-Value="model.KhachHang" SearchFunc="@Search1"
                                                                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                                 CoerceText="@coerceText" CoerceValue="@coerceValue" Variant="Variant.Outlined" For="@(() => model.KhachHang)" />
                                            </MudItem>

                                            <MudItem xs="12" sm="6" md="6">
                                                <MudDatePicker Label="Date" @bind-Date="model.NgayPhatHang" DateFormat="dd/MM/yyyy" Variant="Variant.Outlined" For="@(() => model.NgayPhatHang)" />
                                            </MudItem>


                                        </MudGrid>

                                        <MudGrid>
                                            <MudItem xs="12" sm="12" md="12">
                                                <MudTextField @bind-Value="model.GhiChu" Label="Remark" Variant="Variant.Outlined" For="@(() => model.GhiChu)"></MudTextField>
                                            </MudItem>

                                        </MudGrid>
                                    </MudItem>


                                </MudGrid>





                            </EditForm>
                        </MudItem>
                    </MudTabPanel>
                    <MudTabPanel Style="font-size: 10px" Text="Thông tin container">
                        <MudGrid Style="margin-right: 40px">

                        </MudGrid>
                    </MudTabPanel>

                </MudTabs>

            </MudItem>


        </MudGrid>
    </MudGrid>

    @code {

        Quotation model = new Quotation();
        GhiChuBaoGia model1 = new GhiChuBaoGia();
        public class GhiChuBaoGia
        {
            public string GhiChu { get; set; }
            public string LienHe { get; set; }
        }
        public class Quotation
        {
            public string SoBaoGia { get; set; }
            public string KhachHang { get; set; }
            public string PICKH { get; set; }
            [EmailAddress(ErrorMessage = "Email không đúng định dạng!")]
            public string Email { get; set; }
            public string SoDienThoai { get; set; }
            public string HangHoa { get; set; }
            public string Cangden { get; set; }
            public string DiemDen { get; set; }
            public string CangDi { get; set; }
            public string DiemDi { get; set; }
            public string LoaiXNK { get; set; }
            public string LoaiTai { get; set; }
            [Range(typeof(DateTime), "1/1/1970", "12/31/3000", ErrorMessage = "Value for {0} must be between {1} and {2}")]
            public DateTime? NgayHieuLuc { get; set; }
            [Range(typeof(DateTime), "1/1/1970", "12/31/3000", ErrorMessage = "Value for {0} must be between {1} and {2}")]
            public DateTime? NgayPhatHang { get; set; }
            public string NhanVienKinhDoanh { get; set; }
            public string TrangThai { get; set; }
            public string DieuKienGiaoHang { get; set; }
            public string MoTa { get; set; }
            public string GhiChu { get; set; }

        }

        bool success;
        string[] errors = { };
        private void OnValidSubmit(EditContext context)
        {
            //detailQuatationSea1.Add(new DetailQuatationSea1 { MaPhi = "04041999999", TenPhi = "Dũng", KieuPhi = "TPBANK", TienTe = "VNĐ", DonGia = "1000/MIN(KG); 22.500/+45(KG)", GhiChu = "" });
        }

        private void OnValidSubmit1(EditContext context)
        {
        }
        protected override async Task OnInitializedAsync()
        {
            Elements2 = detailQuatationSea1;
        }

        private void OpenDetailQuotation()
        {
            DialogService.Show<DialogDetailQuotationAir>("Simple Dialog");
        }


        private bool resetValueOnEmptyText;
        private bool coerceText;
        private bool coerceValue;
        private string value1, value2;
        private bool hover = true;
        public string searchString { get; set; }

        private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
    };

        private string[] states2 =
        {
        "Xác nhận", "Treo", "Hủy",
    };

        private async Task<IEnumerable<string>> Search1(string value)
        {
            // In real life use an asynchronous function for fetching data from an api.
            await Task.Delay(5);

            // if text is null or empty, show complete list
            if (string.IsNullOrEmpty(value))
                return states;
            return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }

        private async Task<IEnumerable<string>> Search2(string value)
        {
            // In real life use an asynchronous function for fetching data from an api.
            await Task.Delay(5);

            // if text is null or empty, show complete list
            if (string.IsNullOrEmpty(value))
                return states2;
            return states2.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }

        class DetailQuatationSea1
        {
            public string MaPhi;
            public string TenPhi;
            public string KieuPhi;
            public string TienTe;
            public string DonGia;
            public string GhiChu;
        }

        DetailQuatationSea1[] detailQuatationSea1 = new DetailQuatationSea1[]
    {
        new DetailQuatationSea1 { MaPhi = "OF", TenPhi = "Cước vận tải quốc tế",  KieuPhi = "TPBANK",  TienTe="VNĐ" , DonGia="1000/MIN(KG); 22.500/+45(KG)", GhiChu=""},
        new DetailQuatationSea1 { MaPhi = "OF", TenPhi = "Cước vận tải quốc tế", KieuPhi = "TPBANK",  TienTe="USD" , DonGia="1000/MIN(KG); 22.500/+45(KG)", GhiChu=""},
                                };


        private HashSet<DetailQuatationSea1> selectedItems = new HashSet<DetailQuatationSea1>();
        private IEnumerable<DetailQuatationSea1> Elements2 = new List<DetailQuatationSea1>();



    }
