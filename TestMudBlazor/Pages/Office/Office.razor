@page "/addoffice"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService

<style>
    .mud-tab {
        justify-content: unset !important;
    }

    .mud-toolbar.mud-toolbar-gutters.toolbarCustom {
        padding-left: 6px;
        padding-right: 0px;
    }

    .searchcutom.mud-input-control > .mud-input-control-input-container > div.mud-input.mud-input-text {
        margin-top: 0px;
    }
</style>

<MudGrid Style="margin-top: 10px">
    <MudGrid>
        <MudItem xs="6">
            <MudText Typo="Typo.h5" Style="line-height: 60px" GutterBottom="true">Thêm mới văn phòng</MudText>
        </MudItem>
        <MudItem xs="6">
            <MudToolBar>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Outlined.Add" />
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" />
                <MudIconButton Icon="@Icons.Material.Outlined.Print" />
            </MudToolBar>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12">
            <MudTabs Outlined="false" Position="Position.Right" Rounded="false" Border="false"
                     ApplyEffectsToContainer="true" Class="mt-8 custom_mudtabbar">
                <MudTabPanel Style="font-size: 10px" Text="Thông tin văn phòng">
                    <MudGrid Style="margin-right: 10px">
                        <MudItem xs="12">
                            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                                <MudGrid>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudTextField @bind-Value="model.ma" Label="Mã (*)" Variant="Variant.Outlined" For="@(() => model.ma)"></MudTextField>
                                    </MudItem>

                                    <MudItem xs="12" sm="6" md="4">
                                        <MudTextField @bind-Value="model.ten" Label="Tên" Variant="Variant.Outlined" For="@(() => model.ten)"></MudTextField>
                                    </MudItem>

                                    <MudItem xs="12" sm="12" md="4">
                                        <MudTextField @bind-Value="model.sdt" Label="Điện thoại" Variant="Variant.Outlined" For="@(() => model.sdt)"></MudTextField>
                                    </MudItem>
                                </MudGrid>
                                <MudGrid>


                                    <MudItem xs="12" sm="12" md="8">
                                        <MudTextField @bind-Value="model.diachi" Label="Địa chỉ" Variant="Variant.Outlined" For="@(() => model.diachi)"></MudTextField>
                                    </MudItem>

                                    <MudItem xs="12" sm="12" md="4">
                                        <MudTextField @bind-Value="model.fax" Label="Fax" Variant="Variant.Outlined" For="@(() => model.fax)"></MudTextField>
                                    </MudItem>
                                </MudGrid>

                                <MudGrid>
                                    <MudItem xs="12" sm="12" md="12">
                                        <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Class="ml-n2"
                                                     Label="Hoạt động" />
                                    </MudItem>

                                </MudGrid>
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudText Align="Align.Center" Style="color: red" GutterBottom="true">"Vui lòng nhập thông tin, các ô có dấu (*) là bắt buộc"</MudText>
                                    </MudItem>
                                </MudGrid>
                            </EditForm>
                        </MudItem>
                    </MudGrid>

                </MudTabPanel>

                
                <MudTabPanel Style="font-size: 10px" Text="Thông tin ngân hàng">
                    <MudGrid Style="margin-right: 10px">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudToolBar Class="toolbarCustom">
                                    <MudTextField @bind-Value="searchString" Style="width: 50%" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 searchcutom"></MudTextField>
                                    <MudSpacer />
                                    <MudLink Typo="Typo.body2"><MudIconButton Icon="@Icons.Material.Outlined.Add" @onclick="OpenDialogAccBank" /></MudLink>
                                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" />
                                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" />
                                    <MudIconButton Icon="@Icons.Material.Outlined.Print" />


                                </MudToolBar>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudTable Items="@Elements2" MultiSelection="true" @bind-SelectedItems="selectedItemsBank" Hover="@hover">
                                    <HeaderContent>
                                        <MudTh>Số TK</MudTh>
                                        <MudTh>Chủ TK</MudTh>
                                        <MudTh>Ngân hàng</MudTh>
                                        <MudTh>Loại tiền tệ</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="stk">@context.stk</MudTd>
                                        <MudTd DataLabel="ctk">@context.ctk</MudTd>
                                        <MudTd DataLabel="nh">@context.nh</MudTd>
                                        <MudTd DataLabel="typecur">@context.typecur</MudTd>
                                    </RowTemplate>
                                    <PagerContent>
                                        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                                    </PagerContent>

                                </MudTable>
                            </MudItem>
                        </MudGrid>
                    </MudGrid>
                </MudTabPanel>


            </MudTabs>
        </MudItem>
    </MudGrid>



</MudGrid>

@code {

    public string searchString { get; set; }


    MudForm form;
    bool success;
    string[] errors = { };
    private void OnValidSubmit(EditContext context)
    {
    }
    Form model = new Form();
    public class Form
    {
        [Required(ErrorMessage = "Nhập mã khách hàng!")]
        //[StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string ma { get; set; }

        public string ten { get; set; }

        [Required(ErrorMessage = "Nhập số điện thoại!")]
        public string sdt { get; set; }

        public string thutu { get; set; }

        public string yt { get; set; }

        public string nhom { get; set; }

        public string diachidk { get; set; }

        public string diachi { get; set; }

        public string quocgia { get; set; }

        [Required(ErrorMessage = "Nhập email!")]
        [EmailAddress(ErrorMessage = "Email không đúng định dạng!")]
        public string email { get; set; }

        public string masothue { get; set; }

        public string fax { get; set; }

        public string ghichu { get; set; }

        [Range(typeof(DateTime), "1/1/1970", "12/31/3000", ErrorMessage = "Value for {0} must be between {1} and {2}")]
        public DateTime? ngaysinh { get; set; }

    }

    private void OpenDialogAccBank()
    {
        DialogService.Show<DialogInfoBank>("Simple Dialog");
    }



    private string value { get; set; } = "Nothing selected";
    private HashSet<string> options { get; set; } = new HashSet<string>() { "Alaska" };

    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
    };

    private bool hover = true;

    protected override async Task OnInitializedAsync()
    {
        Elements2 = listbank;
    }


    class ListBank
    {
        public string note;
        public string tinh;
        public string dccn;
        public string cn;
        public string nh;
        public string ctk;
        public string stk;
        public bool action;
        public string typecur;
    }

    ListBank[] listbank = new ListBank[]
{
        new ListBank { stk = "04041999999", ctk = "Dũng", action = true , nh = "TPBANK", cn = "HÀ NỘI", dccn="Hà Nội", tinh="Hà Nội", note="abc", typecur="VNĐ" },
        new ListBank { stk = "04041999999", ctk = "Dũng", action = true , nh = "TPBANK", cn = "HÀ NỘI", dccn="Hà Nội", tinh="Hà Nội", note="abc" , typecur="USD"},
        new ListBank { stk = "04041999999", ctk = "Dũng", action = true , nh = "TPBANK", cn = "HÀ NỘI", dccn="Hà Nội", tinh="Hà Nội", note="abc", typecur="VNĐ" },
        };



    private HashSet<ListBank> selectedItemsBank = new HashSet<ListBank>();
    private IEnumerable<ListBank> Elements2 = new List<ListBank>();

    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string value1, value2;

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }


}
